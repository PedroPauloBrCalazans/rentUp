cadastrar CARROS que tbm vai ter as IMAGENS que vai ter uma CATEGORIA, ESPECIFICAÇÃO, ESPECIFICAÇÕES DO CARRO, USUARIOS, AGENDAMENTO....


ALUGUEL DE CARROS.

REPOSITÓRIOS => Podemos entender que é uma camada(classe) que vai ser responsavel por fazer toda munipulação dos dados na nossa aplicação, Os repositórios serão responsavel por fazer o acesso ao BD, Cadastro... Fazer toda manipulação do BD.. 

A route chama o repositórios e ele que vai ficar responsavel por fazer todo o esquema no BD.
Quem conhece os Models são os repositórios.

----------------------------------------------------------------------------------------------------------------------------------

DTO -> Data Transfer Object, é um conceito de criar um objeto que será responsavel por fazer a transferência de dados entre um classe e outra.

-------------------------------------------------------------------------------------------------------------------------

SOLID => 

SRP - Single Responsability Principie (Princípio da Responsabilidade Única) 
OCP - Open-Closed Principie (Princípio aberto/fechado)
LSP - Liskov Substituion Principie (Princípio de Substituição de Liskov)
ISP - Interface Segregation Principie (Princípio da Segregação de Interface)
D - DIP - Dependency Inversion Principie (Princípio da Inversão de Dependência)

-------------------------------------------------------------------------------------------------------------------------

TODA PARTE DAS ROTAS, COLOCAR DENTRO DA CONTROLLER, CONTROLLES SÃO CLASSES QUE RECEBEM A NOSSA REQUISIÇÃO E RETORNAR A RESPOSTA PARA QUEM ESTÁ CHAMANDO ELAS... DIFERENÇA DA ROTAS E CONTROLLES: AS ROTAS DE FATO SÓ SERVE PARA CHAMAR A CONTROLLER DEIXANDO O MINIMO DE CODIGO POSSIVEL, REQUISIÇÃO E RESPOSTA VAMOS DEIXAR PARA A CONTROLLER... 

USE CASE (CASOS DE USOS) => SÃO OPERAÇÕES, PODEMOS ENTENDER COMO AS REGRAS DE NEGOCIOS DA APLICAÇÃO

-------------------------------------------------------------------------------------------------------------------------

Não conseguimos lista pq estamos trabalhando com repositorios, instancias de repositorios diferentes, precisamos trabalhar em cima da mesma instancia. 

Para isso temos um padrão de projeto, que é o padrão (Singleton).

Singleton => tem como padrão criar apenas uma instancia de uma class que será uma instancia global para a aplicação. Não vamos ter a preocupação de criar mais de uma.

-------------------------------------------------------------------------------------------------------------------------

Upload de arquivos

yarn add multer
yarn add @types/multer -D

lib => Multer - serve para fz a leitura de arquivos (Upload tanto unico quanto em vários.)

single => fazer upload somente de 1 arquivo

para fazer a leitura, existem algumas formas de fazer a leitura mais simple com (readFile faz a leitura tudo de uma vez do arquivo, consome mais memoria) do Node..

STREAM -> Conceito de STREAM, diferente de uma leitura normal o STREAM permite com que a gente leia um determinado arquivo por partes(pedaços), servidor vai enviando pedaços aos poucos, consumo de dados seja menor. 

---- > import fs from "fs"; nativo do NODE
---- > createReadStream() essa função que permite a leitura em partes.
---- > pipe, pega o que foi lido do STREAM e joga para alguma pasta que determinar (Função ou outro arquivo).
---- > lib para utilizar com arquivo CSV => CSV-PARSE

-------------------------------------------------------------------------------------------------------------------------

SWAGGER

yarn add swagger-ui-express
yarn add @types/swagger-ui-express -D

dentro do server importar o swagger
swagger.serve => chamando o servidor
swaggerUi.setup() => é um arquivo JSON que vai está todas as informações da aplicação(documentação) 